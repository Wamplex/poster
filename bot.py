from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
import os
import time

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7780663324:AAFdFeSgNnGMCoyrqMiEiZ78GoBaxozW21I'

# üÜî ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
REVIEW_CHANNEL_ID = -1002264433388

# üìÅ –§–∞–π–ª —Å–æ —Å—á—ë—Ç—á–∏–∫–æ–º
COUNTER_FILE = 'counter.txt'

# üß† –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
recent_messages = []

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞
def load_counter():
    if os.path.exists(COUNTER_FILE):
        with open(COUNTER_FILE, 'r') as f:
            return int(f.read().strip())
    return 1

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
def save_counter(value):
    with open(COUNTER_FILE, 'w') as f:
        f.write(str(value))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    if not message.forward_from and not message.forward_from_chat:
        await message.answer("–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –æ—Ç–∑—ã–≤.")
        return

    current = load_counter()
    timestamp = time.time()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    recent_messages.append((message, current, timestamp))

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ: –º–æ–∂–µ—Ç —ç—Ç–æ —Å–µ—Ä–∏—è –æ—Ç–∑—ã–≤–æ–≤
    await asyncio.sleep(0.5)

    # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–∏
    batch = [m for m, c, t in recent_messages if abs(t - timestamp) < 1.5]

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–∑ —Å–µ—Ä–∏–∏
    if len(batch) > 1 and message == batch[-1]:
        for i, (msg, count, _) in enumerate(batch):
            await bot.send_message(REVIEW_CHANNEL_ID, f"–û—Ç–∑—ã–≤ #{current}/{current + len(batch) - 1}")
            await bot.forward_message(REVIEW_CHANNEL_ID, from_chat_id=msg.chat.id, message_id=msg.message_id)
        await message.answer(f"{len(batch)} –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞")
        save_counter(current + len(batch))
        recent_messages.clear()
    elif len(batch) == 1:
        await bot.send_message(REVIEW_CHANNEL_ID, f"–û—Ç–∑—ã–≤ #{current}")
        await bot.forward_message(REVIEW_CHANNEL_ID, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤")
        save_counter(current + 1)
        recent_messages.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
